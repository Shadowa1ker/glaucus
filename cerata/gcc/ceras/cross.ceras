# Copyright (c) 2019, Firas Khalil Khana
# Distributed under the terms of the ISC License

# Voyager: Firas Khalil Khana (firasuke) <firasuke@gmail.com>

# prepare
rsync -vah $CERD/$name/trunk/ $XSRC/$name --delete --exclude=.$version
cd $XSRC/$name/$name/config

# Curated and cleaned modifications to GCC's source that are still relevant

# This should point to the linker
for file in i386/linux.h i386/linux64.h linux.h; do
  sed "s/\/lib/\\$CRSS\/$TUPL&/" \
    -i $file

  # No need for $TUPL as it's not for pointing to the linker, the forward slash
  # `/` is needed in the end of the path.
  echo "
#undef STANDARD_STARTFILE_PREFIX_1
#define STANDARD_STARTFILE_PREFIX_1 \"$CRSS/lib/\"

#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> $file
done

# Since we're only building for x86-64
sed '/m64/s/lib64/lib/' \
  -i i386/t-linux64

# Further optimizing the linker's path
sed "/MUSL_DYNAMIC_LINKER64/s/\/dev\/null/\\$CRSS\/$TUPL\/lib\/ld-musl-$ARCH.so.1/" \
  -i linux.h

mkdir -v $XBLD/$ceras
case $ceras in
  gcc_2)
    cd ..

    # This (and a similar command `touch $CRSS/include/limits.h`) will cause
    # the first pass of GCC to not detect the custom installed prerequisites;
    # hence, adding a limits.h is only done for the second pass of GCC.
    cat limitx.h glimits.h limity.h > $(dirname $($TUPL-gcc \
      -print-libgcc-file-name))/include-fixed/limits.h
    ;;
esac
cd $XBLD/$ceras

# configure
case $ceras in
  gcc_1)
    # no need for --build and --host (set to gnu) as the configure script is smart
    # enough to detect them. I also believe that the common consumption of GCC's
    # configure script being stupid for not correctly detecting build/host stems
    # from the fact that some of its prerequisites have funky host/build
    # detection (yes, I'm looking at you gmp and mpc...).

    # --with-local-prefix helps further move away from the host

    # --with-native-system-header will cause GCC to search dirname inside the
    # system root specified by --with-sysroot; hence, /include will suffice.

    # So it'll be read as $(--with-sysroot)$(--with-native-system-header)
    # (notice how a trailing slash is added to --with-native-system-header).

    # Misconfiguring the native header directory is quite easy and common and
    # will most likely result in the following error:
    # cc1: error: no include path in which to search for stdc-predef.h

    # --disable-libmpx isn't relevant as MPX support was removed from GCC
    # starting from GCC 9:
    # https://gcc.gnu.org/ml/gcc-patches/2018-04/msg01225.html

    # --disable-libmudflap is also not relevant as the mudflap run time
    # checker was removed starting from GCC 4.9:
    # https://gcc.gnu.org/gcc-4.9/changes.html

    # According to the GCC wiki, this is the 'difficult way' and is 'not 
    # recommended'; however, it's the only way to get the latest GCC to build
    # with the latest upstream prerequisites:
    # https://gcc.gnu.org/wiki/InstallingGCC

    # The first pass of GCC can be built easily without isl (isl isn't
    # required to build GCC, simply pass --without-isl to get rid of the
    # warnings in config.log).

    # PPL, CLooG and OpenScop aren't needed for the latest Graphite to work,
    # as only ISL is required.

    # GNU's gold linker doesn't like musl, as it refuses to build without
    # enabling PIE support, and bloats things up after enabling PIE support
    # and yet manages to still fail:
    # https://github.com/NixOS/nixpkgs/issues/49071

    # Since the first pass of GCC will only be used to build musl, support
    # for everything else is being disabled. Optimizations will also be 
    # disabled in the near future (-O0 and -g0) to further speed up the build
    # process.
    $XSRC/$name/configure \
      --prefix=$CRSS \
      --target=$TUPL \
      --with-local-prefix=$CRSS \
      --with-native-system-header-dir=/include \
      --disable-shared \
      --disable-multilib \
      --disable-threads \
      --with-arch=x86-64 \
      --enable-languages=c \
      --disable-libada \
      --disable-libsanitizer \
      --disable-libssp \
      --disable-libquadmath \
      --disable-libgomp \
      --disable-libvtv \
      --disable-nls \
      --disable-decimal-float \
      --with-gmp=$CRSS \
      --with-mpfr=$CRSS \
      --with-mpc=$CRSS \
      --without-isl \
      --with-sysroot=$CRSS/$TUPL \
      --without-headers \
      --with-newlib \
      --disable-symvers \
      --disable-libatomic \
      --disable-libitm \
      --disable-libstdcxx
    ;;
  gcc_2)
    # libstdc++-v3 is inside gcc's tree and should be built by default after
    # enabling the c++ language support. It also takes the configuration
    # options passed to GCC's configure script like disable pch and threads
    # and the gxx include dir, so there's no need to build it separately like
    # LFS.

    # libc++ has some performance regressions so it's not being used:
    # http://lists.llvm.org/pipermail/cfe-dev/2016-July/049814.html

    # We also don't have any use for libstdcxx-pch plus it takes up a lot of
    # space, so it's being disabled

    # `--enable-__cxa_atexit` is only available on systems with GNU libc:
    # https://gcc.gnu.org/install/configure.html

    # `--enable-plugin` (not `plugins` as `--enable-plugins` is for binutils) is
    # enabled by default

    # At this point, specifying `LDFLAGS="-Wl,-rpath,$CRSS/lib"` is not required
    # is everything built successfully.
    $XSRC/$name/configure \
      --prefix=$CRSS \
      --target=$TUPL \
      --with-local-prefix=$CRSS \
      --with-native-system-header-dir=/include \
      --disable-static \
      --disable-multilib \
      --with-arch=x86-64 \
      --disable-bootstrap \
      --enable-languages=c,c++ \
      --disable-libsanitizer \
      --disable-libssp \
      --disable-libquadmath \
      --disable-libvtv \
      --disable-nls \
      --with-gmp=$CRSS \
      --with-mpfr=$CRSS \
      --with-mpc=$CRSS \
      --with-isl=$CRSS \
      --with-zstd=$CRSS \
      --with-sysroot=$CRSS/$TUPL \
      --with-linker-hash-style=gnu \
      --disable-symvers \
      --disable-libatomic \
      --disable-libstdcxx-pch \
      --disable-libstdcxx-threads \
      --with-gxx-include-dir=$CRSS/$TUPL/include/c++/10.0.0
    ;;
esac

# build
case $ceras in
  gcc_1)
    make \
      all-gcc \
      all-target-libgcc
    ;;
  gcc_2)
    make
    ;;
esac

# install
case $ceras in
  gcc_1)
    make \
      install-gcc \
      install-target-libgcc
    ;;
  gcc_2)
    make \
      install-strip
    ;;
esac
