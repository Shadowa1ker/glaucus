# Copyright (c) 2019, Firas Khalil Khana
# Distributed under the terms of the ISC License

# Voyager: Firas Khalil Khana (firasuke) <firasuke@gmail.com>

# prepare
rsync -vah $CERD/$name/trunk/ $TSRC/$name --delete --exclude=.$version
cd $TSRC/$name/$name/config

# Curated and cleaned modifications to GCC's source that are up to date and
# still relevant. Using these modifications will remove the need to adjust the
# cross-compilation toolchain's compiler specs file.

# Don't use a dummy limits.h in $TOOL/include, it's just stupid...

# This should point to the linker
for file in i386/linux.h i386/linux64.h linux.h; do
  sed "s/\/lib/\\$TOOL&/" \
    -i $file

  # This points to the libc's libraries installed in $TOOL (it's not for
  # pointing to the linker). Also the forward slash `/` is needed in the end of
  # the path.
  echo "
#undef STANDARD_STARTFILE_PREFIX_1
#define STANDARD_STARTFILE_PREFIX_1 \"$TOOL/lib/\"

#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> $file
done

# Since we're only building for x86-64
sed '/m64/s/lib64/lib/' \
  -i i386/t-linux64

# Further optimizing the linker's path
sed "/MUSL_DYNAMIC_LINKER64/s/\/dev\/null/\\$TOOL\/lib\/ld-musl-$ARCH.so.1/" \
  -i linux.h

mkdir -v $XBLD/$name && cd $XBLD/$name

# configure

# According to the GCC wiki, this is the 'difficult way' and is 'not 
# recommended'; however, it's the only way to get the latest GCC to build
# with the latest upstream prerequisites:

# https://gcc.gnu.org/wiki/InstallingGCC

# Since we're using the latest upstream repository, it's common to find some
# options in some configure scripts that do nothing or have been removed. The
# latest updated reference for GCC configuration options is the following link:

# https://gcc.gnu.org/install/configure.html

# A list of supported options follows; `configure --help` may list other
# options, but those not listed in the link above, may not work and should not
# normally be used.

# The configuration options below are ordered in the same order as they appear
# in the link above.

# Since the first pass of GCC will only be used to build musl, support
# for everything else is being disabled. Optimizations will also be 
# disabled in the near future (-g0 and -O0) to further speed up the build
# process.

# `LDFLAGS="-Wl,-rpath,$TOOL/lib"` is needed as we're building GCC the
# 'difficult way' according to:

# https://gcc.gnu.org/wiki/InstallingGCC

# No need for --build and --host (set to gnu) as the configure script is
# smart enough to detect them. I also believe that the common consumption of
# GCC's configure script being stupid for not correctly detecting build/host
# stems from the fact that some of its prerequisites and subdirs have funky
# host/build detection (yes, I'm looking at you gmp, mpc and libiberty...).

# --with-local-prefix helps further move away from the host

# --with-native-system-header will cause GCC to search dirname inside the
# system root specified by --with-sysroot; hence, /include will suffice.

# So it'll be read as $(--with-sysroot)$(--with-native-system-header)
# (notice how a trailing slash is added to --with-native-system-header).

# Misconfiguring the native header directory is quite easy and common and
# will most likely result in the following error:
# cc1: error: no include path in which to search for stdc-predef.h

# It's better to use `--enable-threads=single` in place of
# `--disable-threads` as the latter is just an alias for the former.

# It's better to use `--enable-tls=no` in place of `--disable-tls` as the
# latter is just an alias for the former.

# `--disable-bootstrap` as this is known to work.

# There's no need to add support for the C++ language here.

# --disable-libmpx isn't relevant as MPX support was removed from GCC
# starting from GCC 9:
# https://gcc.gnu.org/ml/gcc-patches/2018-04/msg01225.html

# --disable-libmudflap is also not relevant as the mudflap run time
# checker was removed starting from GCC 4.9:
# https://gcc.gnu.org/gcc-4.9/changes.html

# The first pass of GCC can be built easily without isl (isl isn't
# required to build GCC, simply pass --without-isl to get rid of the
# warnings in config.log).

# PPL, CLooG and OpenScop aren't needed for the latest Graphite to work,
# as only ISL is required.

# GNU's gold linker doesn't like musl, as it refuses to build without
# enabling PIE support, and bloats things up after enabling PIE support
# and yet manages to still fail:
# https://github.com/NixOS/nixpkgs/issues/49071

# `--disable-compressed-debug-sections` in GCC's configure script isn't for
# GCC but for binutils gas and ld

# Host's zlib isn't needed here as it's only pass 1 (doesn't really matter).
CFLAGS='-g0 -O0' \
CXXFLAGS='-g0 -O0' \
$TSRC/$name/configure \
  --target=$TUPL \
  --prefix=$TOOL \
  --with-local-prefix=$TOOL \
  --with-native-system-header-dir=$TOOL/include \
  --disable-shared \
  --disable-multilib \
  --enable-threads=single \
  --with-arch=x86-64 \
  --disable-bootstrap \
  --enable-languages=c,c++ \
  --disable-libssp \
  --disable-libquadmath \
  --disable-libgomp \
  --disable-libvtv \
  --disable-werror \
  --disable-nls \
  --disable-decimal-float \
  --with-gmp=$TOOL \
  --with-mpfr=$TOOL \
  --with-mpc=$TOOL \
  --without-isl \
  --without-zstd \
  --with-linker-hash-style=gnu \
  --with-sysroot=$GLAD \
  --without-headers \
  --with-newlib \
  --disable-libatomic \
  --disable-libstdcxx

# build
make

# install

# for the sake of correctness, the install script complains about missing
# file/directory, so here's a fix even though it's an ignored error...
install -dv $TOOL/share/info/dir

make \
  install-strip
