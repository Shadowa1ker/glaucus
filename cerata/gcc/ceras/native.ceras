# Copyright (c) 2019, Firas Khalil Khana
# Distributed under the terms of the ISC License

# Voyager: Firas Khalil Khana (firasuke) <firasuke@gmail.com>

# prepare
rsync -vah $CERD/$name/trunk/ $NSRC/$name --delete --exclude=.$version
cd $NSRC/$name/$name/config

# Curated and cleaned modifications to GCC's source that are still relevant

# This should point to the linker
for file in i386/linux.h i386/linux64.h linux.h; do
  sed "s/\/lib/\\$NATV\/$TUPL&/" \
    -i $file

  echo "
#undef STANDARD_STARTFILE_PREFIX_1
#define STANDARD_STARTFILE_PREFIX_1 \"$NATV/lib/\"

#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> $file
done

# Since we're only building for x86-64
sed '/m64/s/lib64/lib/' \
  -i i386/t-linux64

# Further optimizing the linker's path
sed "/MUSL_DYNAMIC_LINKER64/s/\/dev\/null/\\$NATV\/$TUPL\/lib\/ld-musl-$ARCH.so.1/" \
  -i linux.h

mkdir -v $NBLD/$ceras
if [ $ceras = gcc_2 ]; then
  cd ..

  # This (and a similar command `touch $TOOL/include/limits.h`) will cause
  # the first pass of GCC to not detect the custom installed prerequisites;
  # hence, adding a limits.h is only done for the second pass of GCC.
  cat limitx.h glimits.h limity.h > $(dirname $($TUPL-gcc \
    -print-libgcc-file-name))/include-fixed/limits.h
fi
cd $NBLD/$ceras

# configure
case $ceras in
  gcc_1)
    # --with-local-prefix helps further move away from the host

    # --with-native-system-header will cause GCC to search dirname inside the
    # system root specified by --with-sysroot; hence, /include will suffice.

    # So it'll be read as $(--with-sysroot)$(--with-native-system-header)
    # (notice how a trailing slash is added to --with-native-system-header).

    # Misconfiguring the native header directory is quite easy and common and
    # will most likely result in the following error:
    # cc1: error: no include path in which to search for stdc-predef.h

    # --disable-libmpx isn't relevant as MPX support was removed from GCC
    # starting from GCC 9:
    # https://gcc.gnu.org/ml/gcc-patches/2018-04/msg01225.html

    # --disable-libmudflap is also not relevant as the mudflap run time
    # checker was removed starting from GCC 4.9:
    # https://gcc.gnu.org/gcc-4.9/changes.html

    # According to the GCC wiki, this is the 'difficult way' and is 'not 
    # recommended'; however, it's the only way to get the latest GCC to build
    # with the latest upstream prerequisites:
    # https://gcc.gnu.org/wiki/InstallingGCC

    # The first pass of GCC can be built easily without isl (isl isn't
    # required to build GCC, simply pass --without-isl to get rid of the
    # warnings in config.log).

    # PPL, CLooG and OpenScop aren't needed for the latest Graphite to work,
    # as only ISL is required.

    # GNU's gold linker doesn't like musl, as it refuses to build without
    # enabling PIE support, and bloats things up after enabling PIE support
    # and yet manages to still fail:
    # https://github.com/NixOS/nixpkgs/issues/49071

    # Since the first pass of GCC will only be used to build musl, support
    # for everything else is being disabled. Optimizations will also be 
    # disabled in the near future (-O0 and -g0) to further speed up the build
    # process.
    CFLAGS='-g0 -O0' \
    CXXFLAGS='-g0 -O0' \
    LDFLAGS="-Wl,-rpath,$NATV/lib" \
    $NSRC/$name/configure \
      --prefix=$NATV \
      --build=$TUPL \
      --host=$TUPL \
      --target=$TUPL \
      --with-local-prefix=$NATV \
      --with-native-system-header-dir=/include \
      --disable-shared \
      --disable-multilib \
      --enable-threads=single \
      --enable-tls=no \
      --with-arch=x86-64 \
      --disable-bootstrap \
      --enable-languages=c \
      --disable-libada \
      --disable-libsanitizer \
      --disable-libssp \
      --disable-libquadmath \
      --disable-libgomp \
      --disable-libvtv \
      --disable-werror \
      --disable-nls \
      --disable-decimal-float \
      --with-gmp=$NATV \
      --with-mpfr=$NATV \
      --with-mpc=$NATV \
      --without-isl \
      --without-zstd \
      --with-linker-hash-style=gnu \
      --disable-gnu-unique-object \
      --disable-lto \
      --with-sysroot=$NATV/$TUPL \
      --without-headers \
      --with-newlib \
      --disable-symvers \
      --disable-libatomic \
      --disable-libitm \
      --disable-libstdcxx
    ;;
  gcc_2)
    # libstdc++-v3 is inside gcc's tree and is being built by default after
    # enabling the c++ language support.
    #
    # libc++ has some performance regressions so it's not being used:
    # http://lists.llvm.org/pipermail/cfe-dev/2016-July/049814.html
    #
    # We also don't have any use for libstdcxx-pch plus it takes up a lot of
    # space, so it's being disabled
    #
    # Still thinking about separately building libstdcxx-v3, but we'll see.
    LD_LIBRARY_PATH=$NATV/lib \
    LDFLAGS="-Wl,-rpath,$NATV/lib" \
    $NSRC/$name/configure \
      --prefix=$NATV \
      --host=$TUPL \
      --target=$TUPL \
      --with-local-prefix=$NATV \
      --with-native-system-header-dir=/include \
      --disable-static \
      --disable-multilib \
      --with-arch=x86-64 \
      --disable-bootstrap \
      --enable-languages=c,c++ \
      --disable-libsanitizer \
      --disable-libssp \
      --disable-libquadmath \
      --disable-libvtv \
      --disable-nls \
      --with-gmp=$NATV \
      --with-mpfr=$NATV \
      --with-mpc=$NATV \
      --with-isl=$NATV \
      --with-zstd=$NATV \
      --with-sysroot=$NATV/$TUPL \
      --with-linker-hash-style=gnu \
      --disable-symvers \
      --disable-libatomic \
      --disable-libstdcxx-pch \
      --disable-libstdcxx-threads \
      --with-gxx-include-dir=$NATV/$TUPL/include/c++/10.0.0
    ;;
esac

# build
make

# install
make \
  install-strip

if [ $ceras = gcc_2 ]; then
  cd $NATV/bin
  ln -fsv $TUPL-gcc cc
fi
