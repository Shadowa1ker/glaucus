--- configure
+++ configure
@@ -710,18 +710,18 @@
 # be dangerously incorrect because it depends on (1) the macros being
 # correct, and (2) IEEE semantics.
 #
-printf "checking whether compiler's long double definition matches float.h... "
-echo '#include <float.h>' > "$tmpc"
-echo '#define C(m,s) (m==LDBL_MANT_DIG && s==sizeof(long double))' >> "$tmpc"
-echo 'typedef char ldcheck[(C(53,8)||C(64,12)||C(64,16)||C(113,16))*2-1];' >> "$tmpc"
-if $CC $CFLAGS_C99FSE \
-  -I$srcdir/arch/$ARCH -I$srcdir/arch/generic -I$srcdir/include \
-  $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
-printf "yes\n"
-else
-printf "no\n"
-fail "$0: error: unsupported long double type"
-fi
+#printf "checking whether compiler's long double definition matches float.h... "
+#echo '#include <float.h>' > "$tmpc"
+#echo '#define C(m,s) (m==LDBL_MANT_DIG && s==sizeof(long double))' >> "$tmpc"
+#echo 'typedef char ldcheck[(C(53,8)||C(64,12)||C(64,16)||C(113,16))*2-1];' >> "$tmpc"
+#if $CC $CFLAGS_C99FSE \
+#  -I$srcdir/arch/$ARCH -I$srcdir/arch/generic -I$srcdir/include \
+#  $CPPFLAGS $CFLAGS -c -o /dev/null "$tmpc" >/dev/null 2>&1 ; then
+#printf "yes\n"
+#else
+#printf "no\n"
+#fail "$0: error: unsupported long double type"
+#fi
 
 #
 # Some build systems globally pass in broken CFLAGS like -ffast-math
