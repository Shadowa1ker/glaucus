name=musl
version=git
release=1
arch=x86-64
url=https://$version.$name-libc.org/c$version/$name
description='An implementation of the standard library functionality described
in the ISO C and POSIX standards, plus common extensions, intended for use on
Linux-based systems'
cluster=core
licenses='BSDv2 LGPLv2.1+ MIT PD'

prepare_toolchain() {
  mkdir -v $TBLD/$name
  cd $TBLD/$name
}

configure_toolchain() {
  # Tread with care as the destination directories for some of these options
  # are tricky.
  #
  # Specifying --prefix alone will install everything into that directory and
  # will attempt to link the libc.so installed there to a system wide linker in
  # /lib.
  # So (prefix alone | installs/libc.so in $PREFIX | linker (to OUR $PREFIX
  # libc.so) in host's /lib and needs sudo because of that)
  #
  # Specifying $DESTDIR with make install, and --prefix here (don't forget
  # the trailing slash if you intend to use both of them) will install
  # everything into $DESTDIR$PREFIX (yup, there exists no forward slash between
  # these two so be careful). This will also symlink the libc.so residing in
  # $DESTDIR$PREFIX to $DESTDIR alone.
  # So (prefix + destdir | installs/libc in $DESTDIR$PREFIX | linker (to OUR 
  # $PREFIX libc.so even though the relative path is wrong) in DESTDIR) so no
  # sudo required
  #
  # Specifying --prefix and --syslibdir, will get musl installed (+ libc.so) in
  # --prefix as intended and will get the tricky linker installed in the host's
  # /usr/lib (which is why make install requires sudo). This is easier to
  # manage especially if the distribution is glibc based, as it makes it easier
  # for target executables to find the path of the linker on the host and on
  # the system (when separately booting) as they share the same path /usr/lib.
  # Although this makes it easier to build without chrooting, chrooting is still
  # required, and this whole approach might be changed, as the graphics stack
  # is very picky about its libdirs.
  $CERD/$name/$name/configure \
    CROSS_COMPILE=$TUPL- \
    --prefix=$TOOL/$TUPL \
    --syslibdir=/usr/lib \
    --target=$TUPL \
    --disable-wrapper \
    --disable-static

  # Remove both the symlink to the original Makefile and the system's musl
  # dynamic linker (this is dangerous if you're already running a musl based
  # distribution as it's assumed that the host is using glibc, so this shouldn't
  # exist in the first place).
  #
  # We then copy the original makefile, and prefix the command responsible
  # for creating the dyanmic linker with sudo so that it installs in /usr/lib
  # (this is the intended behaviour since our host uses glibc so it won't
  # overwrite any existing musl dynamic linker, and it makes it possible to
  # build without chrooting, so this will changed later as glaucus' graphics
  # stack requires a separate chroot)
  sudo rm -fv Makefile /usr/lib/ld-$name-$ARCH.so.1
  cp -av $CERD/$name/$name/Makefile .
  sed 's/$(INSTALL) -D -l/sudo &/' \
    -i Makefile
}

build_toolchain() {
  make
}

install_toolchain() {
  make \
    install
}

prepare() {
  mkdir -v $SBLD/$name
  cd $SBLD/$name
}

configure() {
  # CFLAGS are passed to configure and not as an environment variable.
  #
  # musl doesn't build with LTO enabled, which is shocking but true.
  #
  # here --prefix and --syslibdir are both given, since DESTDIR is also given
  # this will produce the intended effect of being installed similary to all
  # other cerata, however the resulting dynamic linker will be messed up and
  # probably will point to the wrong path, but this is easily fixable.
  $CERD/$name/$name/configure \
    CFLAGS="$CFLAGSNOLTO" \
    --prefix=/usr \
    --syslibdir=/usr/lib \
    --target=$TUPL \
    --host=$TUPL \
    --build=$TUPL \
    --disable-wrapper \
    --disable-static

  # Remove both the symlink to the original Makefile and the system's musl
  # dynamic linker (this is dangerous if you're already running a musl based
  # distribution as it's assumed that the host is using glibc, so this shouldn't
  # exist in the first place).
  #
  # We then copy the original makefile, and modify the command responsible
  # for wrongly linking the resulting dynamic linker with the wrong libc.so, so
  # that the dynamic linker it links to the resulting libc.so is located in the
  # exact same location of the libc.so
  rm -fv Makefile
  cp -av $CERD/$name/$name/Makefile .
  sed 's/ $(libdir)\/libc.so/ libc.so/' \
    -i Makefile
}

build() {
  make
}

install() {
  make \
    DESTDIR=$SCER/$name/sac \
    install-libs

  # we then create a symlink to the dyanimc linker called ldd (list dynamic
  # dependencies)
  install -dv $SCER/$name/sac/usr/bin
  cd $SCER/$name/sac/usr/bin
  ln -fsv ../lib/ld-$name-$ARCH.so.1 ldd

  # and finish it off with stripping some resulting unstripped files
  # we can also further remove all resulting *.a files, but those were left
  # for compatibility purposes, and hopefully will soon be removed if everything
  # builds fine without them
  cd ../lib
  $STRIP -v Scrt1.o crt1.o crti.o crtn.o rcrt1.o
}
